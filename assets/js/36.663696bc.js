(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{553:function(v,_,t){"use strict";t.r(_);var r=t(6),a=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"八大数据结构分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八大数据结构分类"}},[v._v("#")]),v._v(" 八大数据结构分类")]),v._v(" "),t("ol",[t("li",[v._v("数组 Array")]),v._v(" "),t("li",[v._v("栈 Stack")]),v._v(" "),t("li",[v._v("队列 Queue")]),v._v(" "),t("li",[v._v("链表 Linked List")]),v._v(" "),t("li",[v._v("树 Tree")]),v._v(" "),t("li",[v._v("散列表（哈希表）Hash")]),v._v(" "),t("li",[v._v("堆 Heap")]),v._v(" "),t("li",[v._v("图 Graph")])]),v._v(" "),t("h3",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[v._v("#")]),v._v(" 数组")]),v._v(" "),t("p",[v._v("数组是可以在内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过下标进行访问，数组下标从0开始"),t("br"),v._v(" "),t("strong",[v._v("优点")]),v._v(" "),t("br")]),v._v(" "),t("ol",[t("li",[v._v("按照索引查询元素速度快")]),v._v(" "),t("li",[v._v("按照索引遍历数组方便\n"),t("strong",[v._v("缺点")]),t("br")]),v._v(" "),t("li",[v._v("添加，删除的操作慢，因为要移动其他的元素。")])]),v._v(" "),t("p",[t("strong",[v._v("适用场景")]),t("br"),v._v("\n频繁查询，对存储空间要求不大，很少增加和删除的情况")]),v._v(" "),t("h3",{attrs:{id:"栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[v._v("#")]),v._v(" 栈")]),v._v(" "),t("p",[v._v("栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。栈的特点是：先进后出，后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈。"),t("br"),v._v("\n栈常应用于实现递归功能方面的场景，例如斐波那契数列")]),v._v(" "),t("h3",{attrs:{id:"队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[v._v("#")]),v._v(" 队列")]),v._v(" "),t("p",[v._v("队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出，从一端放入元素的操作称为入队，取出元素为出队"),t("br"),v._v("\n使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。")]),v._v(" "),t("h3",{attrs:{id:"链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[v._v("#")]),v._v(" 链表")]),v._v(" "),t("p",[v._v("链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域（内存空间），另一个是指向下一个结点的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等"),t("br"),v._v("\n链表的优点："),t("br")]),v._v(" "),t("ol",[t("li",[v._v("链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素")]),v._v(" "),t("li",[v._v("添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快")])]),v._v(" "),t("p",[v._v("缺点："),t("br")]),v._v(" "),t("ol",[t("li",[v._v("因为含有大量的指针域，占用空间大")]),v._v(" "),t("li",[v._v("查找元素需要遍历链表来查找，非常耗时")])]),v._v(" "),t("p",[v._v("应用场景："),t("br"),v._v("\n数据量较小，需要频繁增加，删除操作的场景")]),v._v(" "),t("h3",{attrs:{id:"树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[v._v("#")]),v._v(" 树")]),v._v(" "),t("p",[v._v("树是一种数据结构，它是由n（n >= 1）个有限节点组成一个具有层次关系的集合。具有以下几个特点"),t("br")]),v._v(" "),t("ul",[t("li",[v._v("每个节点有零个或多个子节点")]),v._v(" "),t("li",[v._v("没有父节点的节点称为根节点")]),v._v(" "),t("li",[v._v("每一个非根节点有且只有一个父节点")]),v._v(" "),t("li",[v._v("除了根节点外，每个子节点可以分为多个不相交的子树；")])])])}),[],!1,null,null,null);_.default=a.exports}}]);